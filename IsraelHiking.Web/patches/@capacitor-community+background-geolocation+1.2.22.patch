diff --git a/node_modules/@capacitor-community/background-geolocation/android/src/main/java/com/equimaps/capacitor_background_geolocation/BackgroundGeolocation.java b/node_modules/@capacitor-community/background-geolocation/android/src/main/java/com/equimaps/capacitor_background_geolocation/BackgroundGeolocation.java
index 86bd74c..19d6ce6 100644
--- a/node_modules/@capacitor-community/background-geolocation/android/src/main/java/com/equimaps/capacitor_background_geolocation/BackgroundGeolocation.java
+++ b/node_modules/@capacitor-community/background-geolocation/android/src/main/java/com/equimaps/capacitor_background_geolocation/BackgroundGeolocation.java
@@ -38,7 +38,8 @@ import androidx.localbroadcastmanager.content.LocalBroadcastManager;
                 // As of API level 31, the coarse permission MUST accompany
                 // the fine permission.
                 Manifest.permission.ACCESS_COARSE_LOCATION,
-                Manifest.permission.ACCESS_FINE_LOCATION
+                Manifest.permission.ACCESS_FINE_LOCATION,
+                Manifest.permission.POST_NOTIFICATIONS
         },
         // A random integer which is hopefully unique to this plugin.
         permissionRequestCode = 28351
@@ -93,8 +94,8 @@ public class BackgroundGeolocation extends Plugin {
             Notification.Builder builder = new Notification.Builder(getContext())
                     .setContentTitle(
                             call.getString(
-                                "backgroundTitle",
-                                "Using your location"
+                                    "backgroundTitle",
+                                    "Using your location"
                             )
                     )
                     .setContentText(backgroundMessage)
@@ -104,7 +105,7 @@ public class BackgroundGeolocation extends Plugin {
 
             try {
                 String name = getAppString(
-                        "capacitor_background_geolocation_notification_icon",
+                        "bg_notification",
                         "mipmap/ic_launcher"
                 );
                 String[] parts = name.split("/");
@@ -286,7 +287,8 @@ public class BackgroundGeolocation extends Plugin {
     public void load() {
         super.load();
 
-        // Android O requires a Notification Channel.
+        // Android O requires a Notification Channel and the service must be started in the foreground.
+        Intent serviceIntent = new Intent(this.getContext(), BackgroundGeolocationService.class);
         if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
             NotificationManager manager = (NotificationManager) getContext().getSystemService(
                     Context.NOTIFICATION_SERVICE
@@ -303,10 +305,13 @@ public class BackgroundGeolocation extends Plugin {
             channel.enableVibration(false);
             channel.setSound(null, null);
             manager.createNotificationChannel(channel);
+            this.getContext().startForegroundService(serviceIntent);
+        } else {
+            this.getContext().startService(serviceIntent);
         }
 
         this.getContext().bindService(
-                new Intent(this.getContext(), BackgroundGeolocationService.class),
+                serviceIntent,
                 new ServiceConnection() {
                     @Override
                     public void onServiceConnected(ComponentName name, IBinder binder) {
diff --git a/node_modules/@capacitor-community/background-geolocation/android/src/main/java/com/equimaps/capacitor_background_geolocation/BackgroundGeolocationService.java b/node_modules/@capacitor-community/background-geolocation/android/src/main/java/com/equimaps/capacitor_background_geolocation/BackgroundGeolocationService.java
index fafbb86..faa0e5c 100644
--- a/node_modules/@capacitor-community/background-geolocation/android/src/main/java/com/equimaps/capacitor_background_geolocation/BackgroundGeolocationService.java
+++ b/node_modules/@capacitor-community/background-geolocation/android/src/main/java/com/equimaps/capacitor_background_geolocation/BackgroundGeolocationService.java
@@ -2,22 +2,23 @@ package com.equimaps.capacitor_background_geolocation;
 
 import android.app.Notification;
 import android.app.Service;
+import android.content.Context;
 import android.content.Intent;
-import android.content.pm.ServiceInfo;
-import android.location.Location;
+import android.location.LocationListener;
+import android.location.LocationManager;
 import android.os.Binder;
-import android.os.Build;
 import android.os.IBinder;
 
 import com.getcapacitor.Logger;
-import com.google.android.gms.location.FusedLocationProviderClient;
-import com.google.android.gms.location.LocationAvailability;
-import com.google.android.gms.location.LocationCallback;
-import com.google.android.gms.location.LocationRequest;
-import com.google.android.gms.location.LocationResult;
-import com.google.android.gms.location.LocationServices;
 
+import java.io.File;
+import java.io.FileWriter;
+import java.text.SimpleDateFormat;
+import java.time.LocalDateTime;
+import java.time.format.DateTimeFormatter;
+import java.util.Date;
 import java.util.HashSet;
+import java.util.Locale;
 
 import androidx.localbroadcastmanager.content.LocalBroadcastManager;
 
@@ -25,6 +26,12 @@ import androidx.localbroadcastmanager.content.LocalBroadcastManager;
 // (showing a persistent notification) when the first background watcher is
 // added, and demoted when the last background watcher is removed.
 public class BackgroundGeolocationService extends Service {
+
+    @Override
+    public int onStartCommand(Intent intent, int flags, int startId) {
+        return START_STICKY;
+    }
+
     static final String ACTION_BROADCAST = (
             BackgroundGeolocationService.class.getPackage().getName() + ".broadcast"
     );
@@ -33,11 +40,11 @@ public class BackgroundGeolocationService extends Service {
     // Must be unique for this application.
     private static final int NOTIFICATION_ID = 28351;
 
-    private class Watcher {
+    private static class Watcher {
         public String id;
-        public FusedLocationProviderClient client;
-        public LocationRequest locationRequest;
-        public LocationCallback locationCallback;
+        public LocationManager client;
+        public float distanceFilter;
+        public LocationListener locationCallback;
         public Notification backgroundNotification;
     }
     private HashSet<Watcher> watchers = new HashSet<Watcher>();
@@ -54,9 +61,9 @@ public class BackgroundGeolocationService extends Service {
     @Override
     public boolean onUnbind(Intent intent) {
         for (Watcher watcher : watchers) {
-            watcher.client.removeLocationUpdates(watcher.locationCallback);
+            watcher.client.removeUpdates(watcher.locationCallback);
         }
-        watchers = new HashSet<Watcher>();
+        watchers = new HashSet<>();
         stopSelf();
         return false;
     }
@@ -77,39 +84,24 @@ public class BackgroundGeolocationService extends Service {
                 Notification backgroundNotification,
                 float distanceFilter
         ) {
-            FusedLocationProviderClient client = LocationServices.getFusedLocationProviderClient(
-                    BackgroundGeolocationService.this
-            );
-            LocationRequest locationRequest = new LocationRequest();
-            locationRequest.setMaxWaitTime(1000);
-            locationRequest.setInterval(1000);
-            locationRequest.setPriority(LocationRequest.PRIORITY_HIGH_ACCURACY);
-            locationRequest.setSmallestDisplacement(distanceFilter);
-
-            LocationCallback callback = new LocationCallback(){
-                @Override
-                public void onLocationResult(LocationResult locationResult) {
-                    Location location = locationResult.getLastLocation();
-                    Intent intent = new Intent(ACTION_BROADCAST);
-                    intent.putExtra("location", location);
-                    intent.putExtra("id", id);
-                    LocalBroadcastManager.getInstance(
-                            getApplicationContext()
-                    ).sendBroadcast(intent);
-                }
-                @Override
-                public void onLocationAvailability(LocationAvailability availability) {
-                    if (!availability.isLocationAvailable()) {
-                        Logger.debug("Location not available");
-                    }
-                }
+            writeToLogFile("Adding watcher " + id);
+            LocationManager locationManager = (LocationManager)getSystemService(Context.LOCATION_SERVICE);
+
+            LocationListener listener = location -> {
+                writeToLogFile("Received location: " + location);
+                Intent intent = new Intent(ACTION_BROADCAST);
+                intent.putExtra("location", location);
+                intent.putExtra("id", id);
+                LocalBroadcastManager.getInstance(
+                        getApplicationContext()
+                ).sendBroadcast(intent);
             };
 
             Watcher watcher = new Watcher();
             watcher.id = id;
-            watcher.client = client;
-            watcher.locationRequest = locationRequest;
-            watcher.locationCallback = callback;
+            watcher.client = locationManager;
+            watcher.distanceFilter = distanceFilter;
+            watcher.locationCallback = listener;
             watcher.backgroundNotification = backgroundNotification;
             watchers.add(watcher);
 
@@ -118,7 +110,9 @@ public class BackgroundGeolocationService extends Service {
             // we simply ignore the exception.
             try {
                 watcher.client.requestLocationUpdates(
-                        watcher.locationRequest,
+                        LocationManager.GPS_PROVIDER,
+                        1000,
+                        watcher.distanceFilter,
                         watcher.locationCallback,
                         null
                 );
@@ -143,9 +137,10 @@ public class BackgroundGeolocationService extends Service {
         }
 
         void removeWatcher(String id) {
+            writeToLogFile("Removing watcher " + id);
             for (Watcher watcher : watchers) {
                 if (watcher.id.equals(id)) {
-                    watcher.client.removeLocationUpdates(watcher.locationCallback);
+                    watcher.client.removeUpdates(watcher.locationCallback);
                     watchers.remove(watcher);
                     if (getNotification() == null) {
                         stopForeground(true);
@@ -159,17 +154,36 @@ public class BackgroundGeolocationService extends Service {
             // If permissions were granted while the app was in the background, for example in
             // the Settings app, the watchers need restarting.
             for (Watcher watcher : watchers) {
-                watcher.client.removeLocationUpdates(watcher.locationCallback);
-                watcher.client.requestLocationUpdates(
-                        watcher.locationRequest,
-                        watcher.locationCallback,
-                        null
-                );
+                watcher.client.removeUpdates(watcher.locationCallback);
+                try {
+                    watcher.client.requestLocationUpdates(
+                            LocationManager.GPS_PROVIDER,
+                            1000,
+                            watcher.distanceFilter,
+                            watcher.locationCallback,
+                            null
+                    );
+                } catch (SecurityException ignored) {
+
+                }
+
             }
         }
 
         void stopService() {
             BackgroundGeolocationService.this.stopSelf();
+            writeToLogFile("stopService called");
+        }
+
+        void writeToLogFile(String message) {
+            File filesDir = getFilesDir();
+            File file = new File(filesDir, "bg_geolocation_log.txt");
+            SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss:SSS", Locale.US);
+            try (FileWriter writer = new FileWriter(file, true)) {
+                Date now = new Date();
+                String formattedDateTime = formatter.format(now);
+                writer.write(formattedDateTime + " | " + message + "\n");
+            } catch (Exception ignored) { }
         }
     }
 }
