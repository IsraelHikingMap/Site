diff --git a/node_modules/@capacitor-community/background-geolocation/CapacitorCommunityBackgroundGeolocation.podspec b/node_modules/@capacitor-community/background-geolocation/CapacitorCommunityBackgroundGeolocation.podspec
index 5bbccd2..1771785 100644
--- a/node_modules/@capacitor-community/background-geolocation/CapacitorCommunityBackgroundGeolocation.podspec
+++ b/node_modules/@capacitor-community/background-geolocation/CapacitorCommunityBackgroundGeolocation.podspec
@@ -10,4 +10,5 @@
     s.source_files = 'ios/Plugin/**/*.{swift,h,m,c,cc,mm,cpp}'
     s.ios.deployment_target  = '12.0'
     s.dependency 'Capacitor'
+    s.dependency 'CocoaLumberjack/Swift'
   end
diff --git a/node_modules/@capacitor-community/background-geolocation/android/build.gradle b/node_modules/@capacitor-community/background-geolocation/android/build.gradle
index 8912970..076ea4e 100644
--- a/node_modules/@capacitor-community/background-geolocation/android/build.gradle
+++ b/node_modules/@capacitor-community/background-geolocation/android/build.gradle
@@ -47,4 +47,6 @@ dependencies {
     implementation "androidx.appcompat:appcompat:$androidxAppCompatVersion"
     implementation "androidx.localbroadcastmanager:localbroadcastmanager:$androidxLocalbroadcastmanagerVersion"
     implementation "com.google.android.gms:play-services-location:$playServicesLocationVersion"
+    implementation "org.tinylog:tinylog-api:2.7.0"
+    implementation "org.tinylog:tinylog-impl:2.7.0"
 }
diff --git a/node_modules/@capacitor-community/background-geolocation/android/src/main/java/com/equimaps/capacitor_background_geolocation/BackgroundGeolocation.java b/node_modules/@capacitor-community/background-geolocation/android/src/main/java/com/equimaps/capacitor_background_geolocation/BackgroundGeolocation.java
index 86bd74c..88bc79d 100644
--- a/node_modules/@capacitor-community/background-geolocation/android/src/main/java/com/equimaps/capacitor_background_geolocation/BackgroundGeolocation.java
+++ b/node_modules/@capacitor-community/background-geolocation/android/src/main/java/com/equimaps/capacitor_background_geolocation/BackgroundGeolocation.java
@@ -21,7 +21,6 @@ import android.os.IBinder;
 import android.provider.Settings;
 
 import com.getcapacitor.JSObject;
-import com.getcapacitor.Logger;
 import com.getcapacitor.NativePlugin;
 import com.getcapacitor.Plugin;
 import com.getcapacitor.PluginCall;
@@ -33,6 +32,10 @@ import org.json.JSONObject;
 
 import androidx.localbroadcastmanager.content.LocalBroadcastManager;
 
+import java.io.File;
+import org.tinylog.Logger;
+import org.tinylog.configuration.Configuration;
+
 @NativePlugin(
         permissions={
                 // As of API level 31, the coarse permission MUST accompany
@@ -286,7 +289,17 @@ public class BackgroundGeolocation extends Plugin {
     public void load() {
         super.load();
 
-        // Android O requires a Notification Channel.
+        Configuration.set("writer", "rolling file");
+        Configuration.set("writer.file", new File(this.getContext().getFilesDir(), "bg_geolocation_log.txt").getAbsolutePath());
+        Configuration.set("writer.maxsize", "512KB");
+        Configuration.set("writer.backups", "1");
+        Configuration.set("writer.buffered", "false");
+        Configuration.set("writer.append", "true");
+        Configuration.set("writer.format", "{date} [{level}] {message}");
+        Configuration.set("level", "debug");
+
+        // Android O requires a Notification Channel and the service must be started in the foreground.
+        Intent serviceIntent = new Intent(this.getContext(), BackgroundGeolocationService.class);
         if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
             NotificationManager manager = (NotificationManager) getContext().getSystemService(
                     Context.NOTIFICATION_SERVICE
@@ -303,10 +316,13 @@ public class BackgroundGeolocation extends Plugin {
             channel.enableVibration(false);
             channel.setSound(null, null);
             manager.createNotificationChannel(channel);
+            this.getContext().startForegroundService(serviceIntent);
+        } else {
+            this.getContext().startService(serviceIntent);
         }
 
         this.getContext().bindService(
-                new Intent(this.getContext(), BackgroundGeolocationService.class),
+                serviceIntent,
                 new ServiceConnection() {
                     @Override
                     public void onServiceConnected(ComponentName name, IBinder binder) {
@@ -328,6 +344,7 @@ public class BackgroundGeolocation extends Plugin {
 
     @Override
     protected void handleOnResume() {
+        Logger.info("onResume");
         if (service != null) {
             if (stoppedWithoutPermissions && hasRequiredPermissions()) {
                 service.onPermissionsGranted();
@@ -338,12 +355,14 @@ public class BackgroundGeolocation extends Plugin {
 
     @Override
     protected void handleOnPause() {
+        Logger.info("onPause");
         stoppedWithoutPermissions = !hasRequiredPermissions();
         super.handleOnPause();
     }
 
     @Override
     protected void handleOnDestroy() {
+        Logger.info("onDestroy");
         if (service != null) {
             service.stopService();
         }
diff --git a/node_modules/@capacitor-community/background-geolocation/android/src/main/java/com/equimaps/capacitor_background_geolocation/BackgroundGeolocationService.java b/node_modules/@capacitor-community/background-geolocation/android/src/main/java/com/equimaps/capacitor_background_geolocation/BackgroundGeolocationService.java
index fafbb86..85a1ecb 100644
--- a/node_modules/@capacitor-community/background-geolocation/android/src/main/java/com/equimaps/capacitor_background_geolocation/BackgroundGeolocationService.java
+++ b/node_modules/@capacitor-community/background-geolocation/android/src/main/java/com/equimaps/capacitor_background_geolocation/BackgroundGeolocationService.java
@@ -2,22 +2,16 @@ package com.equimaps.capacitor_background_geolocation;
 
 import android.app.Notification;
 import android.app.Service;
+import android.content.Context;
 import android.content.Intent;
-import android.content.pm.ServiceInfo;
-import android.location.Location;
+import android.location.LocationListener;
+import android.location.LocationManager;
 import android.os.Binder;
-import android.os.Build;
 import android.os.IBinder;
 
-import com.getcapacitor.Logger;
-import com.google.android.gms.location.FusedLocationProviderClient;
-import com.google.android.gms.location.LocationAvailability;
-import com.google.android.gms.location.LocationCallback;
-import com.google.android.gms.location.LocationRequest;
-import com.google.android.gms.location.LocationResult;
-import com.google.android.gms.location.LocationServices;
-
 import java.util.HashSet;
+import org.tinylog.Logger;
+
 
 import androidx.localbroadcastmanager.content.LocalBroadcastManager;
 
@@ -25,6 +19,13 @@ import androidx.localbroadcastmanager.content.LocalBroadcastManager;
 // (showing a persistent notification) when the first background watcher is
 // added, and demoted when the last background watcher is removed.
 public class BackgroundGeolocationService extends Service {
+
+    @Override
+    public int onStartCommand(Intent intent, int flags, int startId) {
+        Logger.info("onStartCommand called");
+        return START_STICKY;
+    }
+
     static final String ACTION_BROADCAST = (
             BackgroundGeolocationService.class.getPackage().getName() + ".broadcast"
     );
@@ -33,11 +34,11 @@ public class BackgroundGeolocationService extends Service {
     // Must be unique for this application.
     private static final int NOTIFICATION_ID = 28351;
 
-    private class Watcher {
+    private static class Watcher {
         public String id;
-        public FusedLocationProviderClient client;
-        public LocationRequest locationRequest;
-        public LocationCallback locationCallback;
+        public LocationManager client;
+        public float distanceFilter;
+        public LocationListener locationCallback;
         public Notification backgroundNotification;
     }
     private HashSet<Watcher> watchers = new HashSet<Watcher>();
@@ -54,9 +55,9 @@ public class BackgroundGeolocationService extends Service {
     @Override
     public boolean onUnbind(Intent intent) {
         for (Watcher watcher : watchers) {
-            watcher.client.removeLocationUpdates(watcher.locationCallback);
+            watcher.client.removeUpdates(watcher.locationCallback);
         }
-        watchers = new HashSet<Watcher>();
+        watchers = new HashSet<>();
         stopSelf();
         return false;
     }
@@ -77,39 +78,24 @@ public class BackgroundGeolocationService extends Service {
                 Notification backgroundNotification,
                 float distanceFilter
         ) {
-            FusedLocationProviderClient client = LocationServices.getFusedLocationProviderClient(
-                    BackgroundGeolocationService.this
-            );
-            LocationRequest locationRequest = new LocationRequest();
-            locationRequest.setMaxWaitTime(1000);
-            locationRequest.setInterval(1000);
-            locationRequest.setPriority(LocationRequest.PRIORITY_HIGH_ACCURACY);
-            locationRequest.setSmallestDisplacement(distanceFilter);
-
-            LocationCallback callback = new LocationCallback(){
-                @Override
-                public void onLocationResult(LocationResult locationResult) {
-                    Location location = locationResult.getLastLocation();
-                    Intent intent = new Intent(ACTION_BROADCAST);
-                    intent.putExtra("location", location);
-                    intent.putExtra("id", id);
-                    LocalBroadcastManager.getInstance(
-                            getApplicationContext()
-                    ).sendBroadcast(intent);
-                }
-                @Override
-                public void onLocationAvailability(LocationAvailability availability) {
-                    if (!availability.isLocationAvailable()) {
-                        Logger.debug("Location not available");
-                    }
-                }
+            Logger.info("Adding watcher " + id + " Existing watchers: " + watchers.size());
+            LocationManager locationManager = (LocationManager)getSystemService(Context.LOCATION_SERVICE);
+
+            LocationListener listener = location -> {
+                Logger.info("Received location: " + location);
+                Intent intent = new Intent(ACTION_BROADCAST);
+                intent.putExtra("location", location);
+                intent.putExtra("id", id);
+                LocalBroadcastManager.getInstance(
+                        getApplicationContext()
+                ).sendBroadcast(intent);
             };
 
             Watcher watcher = new Watcher();
             watcher.id = id;
-            watcher.client = client;
-            watcher.locationRequest = locationRequest;
-            watcher.locationCallback = callback;
+            watcher.client = locationManager;
+            watcher.distanceFilter = distanceFilter;
+            watcher.locationCallback = listener;
             watcher.backgroundNotification = backgroundNotification;
             watchers.add(watcher);
 
@@ -118,7 +104,9 @@ public class BackgroundGeolocationService extends Service {
             // we simply ignore the exception.
             try {
                 watcher.client.requestLocationUpdates(
-                        watcher.locationRequest,
+                        LocationManager.GPS_PROVIDER,
+                        1000,
+                        watcher.distanceFilter,
                         watcher.locationCallback,
                         null
                 );
@@ -145,7 +133,7 @@ public class BackgroundGeolocationService extends Service {
         void removeWatcher(String id) {
             for (Watcher watcher : watchers) {
                 if (watcher.id.equals(id)) {
-                    watcher.client.removeLocationUpdates(watcher.locationCallback);
+                    watcher.client.removeUpdates(watcher.locationCallback);
                     watchers.remove(watcher);
                     if (getNotification() == null) {
                         stopForeground(true);
@@ -153,23 +141,32 @@ public class BackgroundGeolocationService extends Service {
                     return;
                 }
             }
+            Logger.info("Removed watcher " + id + " Remaining watchers: " + watchers.size());
         }
 
         void onPermissionsGranted() {
             // If permissions were granted while the app was in the background, for example in
             // the Settings app, the watchers need restarting.
             for (Watcher watcher : watchers) {
-                watcher.client.removeLocationUpdates(watcher.locationCallback);
-                watcher.client.requestLocationUpdates(
-                        watcher.locationRequest,
-                        watcher.locationCallback,
-                        null
-                );
+                watcher.client.removeUpdates(watcher.locationCallback);
+                try {
+                    watcher.client.requestLocationUpdates(
+                            LocationManager.GPS_PROVIDER,
+                            1000,
+                            watcher.distanceFilter,
+                            watcher.locationCallback,
+                            null
+                    );
+                } catch (SecurityException ignored) {
+
+                }
+
             }
         }
 
         void stopService() {
             BackgroundGeolocationService.this.stopSelf();
+            Logger.info("stopService called");
         }
     }
 }
